"""
    Kordian CzyÅ¼ewski,
    EiT2, WEEIA
    235768@edu.p.lodz.pl

    Following script generates three *.xyz files based on function definitions.
    x, y, z lists of floats are generated by lambda expressions (vertical, horizontal & cylindrical)
    there is also a wrapper gen_point_cloud which outputs results into the file
    filename-algorithm bindings are provided in form of a dict[str, callable]
    which is then iterated in list comprehension (last line)
    this approach is very slow but has a neat syntax + it's easy to quickly incorporate
    new point-cloud algos thanks to it.
"""
# imports
from numpy import random, zeros, column_stack, savetxt, pi, cos, sin

# auxillary lambdas
theta = lambda x: random.uniform(0, 2 * pi, x)

# definitions of generated objects
generate_cylindrical = lambda radius, _, height, num_points: [radius * cos(theta(num_points)), radius * sin(theta(num_points)), random.uniform(0, height, num_points)]
generate_horizontal = lambda width, depth, _, num_points: [random.uniform(0, width, num_points), random.uniform(0, depth, num_points), zeros(num_points)]
generate_vertical = lambda width, depth, height, num_points: [random.uniform(0, width, num_points), zeros(num_points), random.uniform(0, height, num_points)]

# generates a file based on a function
def gen_point_cloud(filename: str, function: callable, args: list) -> None:
    # may fail here
    result = function(*args)
    x, y, z = result
    content = column_stack((x, y, z))
    # output to file
    savetxt(filename, content, delimiter=' ', fmt="%f")



# __MAIN__
width, depth, height = 16.16, 16.16, 16.16
n_points = 4096
task_params = { # slow but neat syntax
    "horizontal plane": generate_horizontal,
    "vertical plane": generate_vertical,
    "cylindric": generate_cylindrical
}
[gen_point_cloud(f"zadanie_1_{filename.replace(' ', '_')}.xyz", function, [width, depth, height, n_points]) for filename, function in task_params.items()]
